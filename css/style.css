@import url(//spoqa.github.io/spoqa-han-sans/css/SpoqaHanSansNeo.css);
@import url(./fontello.css);
@import url(./normalize.css);

/* CSS 변수 */

/* global scope니까 :root 라고 명시~ */
:root{
    --primary-color: #ce4827;
    --secondary-color: #eaac2e; 
    --silver: #aaa;
} 



/* 숨김 콘텐츠 */
.a11y-hidden, legend, .readable-hidden{
    background-color: red;
    /* display: none; ---> 이렇게 접근도 못하게 보이지 않게 없애면 안됌!!! 이건 아예 존재하지 않는거! 그래서 숨김 콘텐츠를 만들때는 이렇게가 아니라 아래와 같이!*/
    position: absolute;
    /* 안녕히계세요! 저는 안드로메다로 갑니다!!! 존재는 하지만 눈에는 안보일거에요! */
    /* top: -9999px; */
    
    /* width와 height의 값을 주기는 해서.. 기본적으로 블록을 만들어 놓고... */
    width: 1px;
    height: 1px;
    /* 마진은 패딩과 다르게 음수값을 줄 수 있다는 것! */
    margin: -1px; 
    /* 음수값으로 마진을 준 것을 overflow를 사용해서 이 부분을 읽어준다... 즉, 이렇게 숨김 처림 된 이 부분을 스크린리더가 보여줄 때 갑자기 스크롤이 완전 위쪽으로 솓는 것을 방지하기 위해... 이렇게 해주는 것! */
    overflow: hidden;
    /* 트릭을 이용하는 것! cf. https://bennettfeely.com/clippy/   ---> 모든 좌표를 전부 0으로 잡아줘서...이런 특성을 이용하여서 좌표는 그곳에 있지만 우리 눈에는 안보이는 숨김 컨텐츠를 만들어 낸것~ */
    clip-path: polygon(0 0, 0 0, 0 0);
    /* 밑에있는 거는 앞으로의 버전에서는 사용하지 말라고는 하지만... 만약 하위 호환성을 보장하고 싶을때 위에 있는 코드랑 같이 사용함!  */
    /* cf. https://mulder21c.github.io/2019/03/22/screen-hide-text/ ---> 참고용!! */
    clip: rect(0 0 0 0);
}

/* 스타일 초기화 - 아래와 같이... 자주 사용하게 될, 중복으로 사용하게 될 리셋 모듈을 내가 만들어 놓는 것! 적용하고 싶으면 적용을 원하는 html상의 태그로 가서 class에 적으면 됨!!!*/
.reset-list{
    list-style: none;
    margin: 0;
    padding-left: 0;
}
html{
    font-size: 10px;
}
body{
    font-size: 1.2rem;
    font-weight: 300;
    font-family: 'Spoqa Han Sans Neo', 'sans-serif';
    /* 바디에 그라디언트 */
    background: url(./images/bg_flower.png) no-repeat 50% 0, 
    /* 만약 백그라운드에 까는 이미지가 하나만 있었다면 url앞에 #ccc를 붙여도 되겠지만 이거는 멀티백그라운드이기 때문에... */
    #ccc linear-gradient(180deg, #ccc 0%, #eee 30%, #fff 50%, #fff 100%);
    /* 또는 아래와 같이 마지막에 따로 개별속성으로 선언하는 전략도 있음! 현업에서는 아래와 같은 방법으로도~ */
    /* background-color: #ccc; */
}
body *, body *::before, body *::after{
    box-sizing: border-box;
}

/* 링크 스타일 */
a{
    text-decoration: none;
    /* 기본적으로 a 태그는 #00f처리 되어있기 때문에 기본칼라인 블랙으로 그냥 상속받게끔 한 것! */
    color: inherit;
}
.header, .visual, .main, .slogan, .footer-content{
    width: 940px;
    margin: 0 auto;
}

/* 헤더 */
.header{
    background-color: #fff;
    /* border-top: 1px solid transparent; */
    position: relative;
    padding: 0 30px 35px;
    border-radius: 0 0 15px 15px;
}
/* 로고 */
.logo{
    margin: 0; 
    position: absolute;
    top: 41px;
    left: 65px;
    /* font-size: 1em;  아래꺼랑 가은 말!*/
    font-size: 100%; 
    line-height: 1;
}
/* 안내 링크 */
.member{
    margin: 0;
    list-style: none;
    /* 기본 패딩 없애기... */
    padding-left: 0; 
    /* 인라인 블록으로 만든 멤버 클래스의 li를 right 정렬해주고 싶으면 그의 부모 요소에 text-align을 바꿔주는 것~! */
    text-align: right;
    /* li들 태그 사이에 공백문자로   */
    font-size: 0;
    padding: 5px 0;
    position: relative;
    right: -10px;
}
.member li{
    display: inline-block;
    /* 루트인 html을 수정하면 같이 바뀔 수 있게 rem을 사용! px은 지양! */
    font-size: 1.2rem;
}
.member a{
    /* 원래 a는 inline 속성. 그래서 패딩을 위아래 줘도 메인이 같이 늘어나지 않는다. 그래서 블록으로 성격을 바꿔서 메인도 같이 늘어나게 해주자! */
    display: inline-block;
    /* background-color: pink; */
    /* 왜 굳이 패딩? .devider에 마진을 줘도 되구, 그냥 margin을 줘도 되는데? 왜냐면 ux(사용자의-)관점에서. 딱 그 글자를 클릭하지 않아도 그 근처를 선택하면 클릭이 될 수 있게끔~! */
    padding: 5px 10px;
    /*  소문자로 입력했던 english를 대문자로 바꿔서 렌더링을 해주기 위해... 아래와 같이! */
    text-transform: uppercase;
}
.divider{
    margin: 0 3px;
}

/* 이렇게 구체성을 무시하고 코드를 짠뒤에 고민하지 말고 ...  */
/* .member li::before{
    content: "|";
} */
/* .first::before{
    content: ""  !important;
} */
/* 아래와 같이 할 것! */
/* .member li:nth-child(n+2)::before{
    content: "|";
} */
/* 메인 메뉴 */
.menu{
    /* background: linear-gradient(to bottom, red, green); */
    /*  가능하다면 ce4827라는 배경색을 기본적으로 깔아서 ... Linear-gradient가 제대로 작동하지 않을 때 보여줄 배경색을 깔아논다! */
    background: #ce4827 linear-gradient(to bottom, #eaac2e 0%,#ce4827 35%,#ce4827 70%,#eaac2e 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    border-top: 2px solid #000;
    /* box-shadow: ; 로도 같은 것을 만들 수 있다고 함! 상자 사이즈에 영향을 주지도 않는다고 함! */
    /* box-shadow: 0 -2px 0 0 #000; */
    border-radius: 0 0 5px 5px;
    /* /를 기준으로 앞에쪽이 x축이고 뒤쪽인 y축! 완만한 경사를 만들고 싶을 때 사용! */
    /* border-radius: 0 0 30px 30px / 0 0 5px 5px; */
    height: 47px;
    padding-left: 225px;
}
.menu a{
    outline: 0;
}
.menu-item{
    position: relative;
    float: left;
    border-left: 1px solid #fff;
}
.menu-item-button{
    color: #fff;
    font-size: 1.6rem;
    font-weight: 700;
    /* shadow는 두겹으로 준 것! 그렇게 윤곽을 만든 것! */
    text-shadow: 1px 1px 0 #000, -1px -1px 0 #000;
    /* 원래 a 태그는 인라인 요소인데 이걸 성격을 블록으로 바꾸고 또 패딩도 넣어줌으로써 마우스를 호버했을 떄 바로 클릭할 수 있게끔 하는 영역을 더 크게 setting해준다. */
    display: block;
    padding: 2px 20px 0;
    line-height: 45px;
}
/* 동적 클래스 - 어떤 이벤트가 발생하였을 때 색깔이 바뀌려면 그 글꼴 색을 원래 먹였던 요소를 바꿔줄 것! */
.menu-act .menu-item-button{
    color: #ff0;
    /* border-bottom: 2px solid #000; */
}
.menu-act .menu-item-button::after{
    content: "";
    display: block;
    /* 메뉴에 커서를 올렸을 때, 글자수만큼 밑줄이 그려지려면... 아래와 같은 트릭!  */
    background-color: #000;
    height: 2px;
    margin-top: -2px;
}
/* .menu-item:first-child{
    margin-left: 225px;
} */
.sub-menu{
    position: absolute;
    /* 일단 헷갈릴때 안보이게 해놓기! 임시 코드임! */
    display: none;
    top: 47px;
    white-space: nowrap;
    /* width: max-content;  ---> 이건 그냥 내가 찾아낸거~ 위에 꺼는 강사님의 비법~!*/
}
.menu-act .sub-menu{
    display: block;
}
.sub-menu1, .sub-menu2, .sub-menu3{
    /* display: none; */
    left: 0;
}
.sub-menu4, .sub-menu5, .sub-menu6{
    /* display: none; */
    right: 0;
}
.sub-menu li{
    display: inline-block;
}
.sub-menu a{
    display: inline-block;
    padding: 10px 0 8px;
    margin-right: 5px;
}
/* .sub-menu a::before{
    content: '\f192'; 
    font-family: 'fontello';
    font-weight: normal;
    display: inline-block;
    text-decoration: inherit;
    width: 1em;
    margin-right: .2em;
    text-align: center;
} */

/* .sub-menu a:hover::before, .sub-menu a:focus::before{  --> 하지만 멀티 이벤트는 css가 처리하지 못해서 이거는 자바스크립트로 하는 것이 옳다!*/
/*    content: '\e800';
} */
.sub-menu a:hover, .sub-menu a:focus{
    color: #f00;
}

/* 비주얼 애니메이션 */
@keyframes textAni{
    from{
        font-size: 12px;
        color: rgba(0, 0, 0, 0);
        /* margin으로 하면 레이아웃도 같이 무너지는 것을 확인할 수 있다!  */
        /* padding: 0; */
        /* 두번째 방법 */
        /* position: absolute; */
        /* top: 0; */
        /* left: 0; */
        /* 세번째 방법 */
        transform: translate(0, 0);
    }
    to{
        font-size: 24px;
        color: rgba(0, 0, 0, 1);
        /* 두번째 방법 */
        /* padding: 75px 0 0 400px; */
        /* top: 75px; */
        /* left: 400px; */
        /* 세번째 방법 */
        transform: translate(400px, 75px);
    }
}
@keyframes bgAni{
    0%{
        opacity: 1;
    }
    100%{
        opacity: 0;
    }
}
.visual{
    /* background-color: salmon; */
    height: 120px;
    position: relative;
}
.visual::before, .visual::after{
    /* 투명한 상자가 두개가 겹쳐있는 형태니까 아래와 같이 적어도 아무것도 안보이는게 정상! */
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-repeat: no-repeat;
    animation-name: bgAni;
    animation-duration: 2000ms;
    animation-iteration-count: infinite;
    animation-direction: alternate;
}
.visual::before{
    /* 여러개의 배경이미지를 삽입할 수 있다! 콤마로 계속 add하기! 백그라운드 이미지랑 포지션으로 따로 해줘도 되구... 그냥 나란히 나열해도 되구,,,*/
    background-image: url(./images/ani_flower_01.png), url(./images/ani_flower_02.png);
    background-position: 0 -10px, 670px 0;
}
.visual::after{
    /* background: url(./images/ani_flower_03.png) no-repeat 300px 0,
    url(./images/ani_flower_04.png) no-repeat 800px 0; */
    background-image: url(./images/ani_flower_03.png), url(./images/ani_flower_04.png);
    background-position: 300px 0, 800px 0;
    animation-delay: 1000ms;
}
.visual-text{
    /* 폰트도 바꿔주는 센스! */
    font-family: Georgia, 'Times New Roman', Times, serif;
    /* 애니메이션은 아래와 같은 2가지의 속성이 무조건 필요! 애니메이션 이름이랑 2초간 동작하라는 듀레이션! */
    animation-name: textAni;
    animation-duration: 1000ms;
    animation-fill-mode: forwards;
    /* scroll이 가로로 생기는 것을 막기 위해...아래와 같이 해도됨! ^^  */
    /* display: inline-block; */
    position: absolute;
    z-index: 10;
}
.main{
    background-color: #fff;
    border-radius: 15px 15px 0 0;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding: 30px;
    min-height: 400px;
}
/* .group{
    height: 60vh;
} */
.group1{
    /* background-color: violet; */
    width: 250px;
}
.group2{
    /* background-color: aqua; */
    width: 380px;
}
.group3{
    /* background-color: sandybrown; */
    width: 190px;
}

/* 로그인 */
.login{
    background: radial-gradient(circle at right top, #eaac2e, #ce4827);
    border-radius: 5px;
    box-shadow: 5px 5px 0 0 #aaa;
    padding: 10px;
}
.login-heading{
    /* 아래와 같이 선택 자체가 잘 됐는지 확인할 것! */
    /* background-color: yellow; */
    margin: 0;
    text-indent: 10px;
    /* 위에 들여쓰기 (패딩과 마진과는 다르게 박스 크기에 영향을 주지 않는다는 장점!)코드는 아래 두개의 코드와 동일! */
    /* padding-left: 10px; */
    /* margin-left: 10px; */
    font-size: 1.5rem;
    font-weight: 500;
    color: #ff0;
}
.login-form{
    background-color: #fff;
    border-radius: 5px 5px 0 0;
    padding: 10px 10px 0 10px;
    margin-top: 10px;
}
.login-form fieldset{
    position: relative;
    margin: 0;
    padding: 0 0 10px 0;
    border: 0;
    border-bottom: 1px solid #aaa;
}
.user-pw{
    /* background-color: lime; */
    margin-top: 6px;
}
.login-form label{
    display: inline-block;
    width: 50px;
}
.login-form input{
    width: 90px;
    height: 22px;
    padding: 1px 1px 1px 5px;
    border: 1px solid #aaa;
}
.btn-login{
    position: absolute;
    top: 0;
    right: 0;
    background-color: #ce4827;
    padding: 0;
    border: 0;
    color: #fff;
    width: 50px;
    height: 50px;
    border-radius: 5px;
}
.member-service{
    background: #fff;
    padding: 5px 10px;
    margin: 0;
    list-style-type: none;
    border-radius: 0 0 5px 5px;
    display: flex;
    justify-content: space-between;
}
.member-service a{
    /* span태그와 나란히 한줄에 있고 싶으면 Inline-block을 사용! */
    display: inline-block;
    padding-left: 5px 0;
}
.member-service .icon-right-open{
    color: #ce4827;
}

/* 유효성 검사 배너 */
.validation{
    /* background-color: yellow; */
    margin: 25px 0 0 0;
    padding-left: 0;
    list-style-type: none;
}
.validation-list{
    padding-left: 0;
    list-style-type: none;
}
/* 리스트 말고, 클릭하는 영역을 커지게끔 하려면 a태그를 사용할 것! */
/* 단, li말고 a는 어려움이 있음... li가 더 쉽다고 느낄수는 있음! 하지만 아래와 같이 할 것! block으로 주면 부모 상자 만큼의 영역을 차지...그래서 a의 영역이 커져서 조금 더 큰 영역에서 클릭할 수 있게된다. */
.validation-list a{
    display: block;
    border: 1px solid #aaa;
    border-radius: 20px;
    margin-top: 10px;
    padding: 7px 5px 5px 40px;
    background: url(./images/validation_icon.png) no-repeat 15px 50%, 
    linear-gradient(180deg, #ccc, #eee);
    background-color: #ccc;
}

/* 웹 관련 용어 */
/* .clearfix::after{
    content: "";
    display: block;
    clear: both;
} */
.term{
    margin-top: 20px;
    background: #ccc linear-gradient(180deg, #ccc, #eee);
    /* background-color: #ccc; */
    border: 1px solid #aaa;
    border-radius: 5px;
    padding: 15px;
}   
.term-heading{
    margin: 0;
    font-size: 1.5rem;
    font-weight: 500;
}
.term-list{
    margin: 10px 0 0 0;
}
.term-list > div::after{
    content: "";
    display: block;
    clear: both;
}
.term-list-thumbnail, .term-list-brief{
    margin-left: 0;
}
.term-list-subject, .term-list-brief{
    /* background-color: pink; */
    width: 145px;
}
.term-list-subject{
    color: #296897;
    margin-top: -1px;
}
.term-list-brief{
    margin-top: 5px;
    line-height: 1.5;
    text-align: justify;
}
.term-list img{
    /* 이미지가 imline요소기 때문에 베이스라인이 안맞기도... 그럴때 인라인 요소에 베이스라인을 맞추기 위해 사용할 수 있는 트릭이 아래와 같음! 단, 값은 Middle, top... 뭘 넣어도 상관 없음! */
    vertical-align: middle;
    /* 두번째 솔루션 --> 인라인 상자의 성격 자체를 블록으로 바꿜 줄 것! */
    /* display: block; */
    /* 단, 두번 째 솔루션의 문제는 레이아웃 자체가 블록 요소 하나가 생김으로써 무너질 위험도 있으니까... 이거는 조심! 경우에 따라 다른 방식을 사용할 것! */
}
.term-list-thumbnail{
    /* background-color: lime; */
}
.term-list > div{    
    /* background-color: salmon; */
    margin-top: 10px;
    /* overflow: hidden; */
}
.term-list div:nth-child(odd) .term-list-subject, 
.term-list div:nth-child(odd) .term-list-brief{
    float: right;
}
.term-list div:nth-child(odd) .term-list-thumbnail{
    float: left;
}
.term-list div:nth-child(even) .term-list-subject, 
.term-list div:nth-child(even) .term-list-brief{
    float: left;
}
.term-list div:nth-child(even) .term-list-thumbnail{
    float: right;
}

/* 검색 폼 */
.search-form{
    background: #ccc linear-gradient(180deg, #ccc, #fff);
    border: 1px solid #aaa;
    /* 다른 여러가지의 방법! 아래와 같이! */
    /* border-bottom: 0; */
    /* border-bottom-color: transparent; ---> 이거가 아래 코드보다 더 안전! 왜냐면 내가 앞으로 배경을 뭐를 쓸지 모르니까!*/
    border-bottom-color: #fff;
    padding: 15px 25px 10px;
    border-radius: 15px 15px 0 0;
}
.search-form fieldset{
    /* background-color: yellow; */
    margin: 0;
    padding: 0;
    border: 0;
}
.search-form .flexbox{
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.search-form input{
    /* 인풋 상자의 크기를 조율해 줌으로써 배치가 더 내가 원하는 데로~ 파이어폭스 확인해 보기! */
    width: 200px;
    border: 1px solid #aaa;
    border-radius: 3px;
    padding: 1px 1px 1px 5px;
    height: 22px;
}
.btn-search{
    border: 1px solid #aaa;
    border-radius: 3px;
    background-color: #212121;
    color: #fff;
    padding: 3px 10px;
    height: 22px;
    font-size: 1.1rem;
}

/* 그룹 2 - 공지사항 및 자료실 */
/* .board::after{
    content: "";
    display: block;
    clear: both;
} */
.board{
    /* background-color: lightcoral; */
    position: relative;
    padding-top: 45px;
    margin-top: 20px;
}
.notice-more, .pds-more{
    position: absolute;
    top: 0;
    right: 0;
    /* float: right; */
    /* padding: 5px; */
    /* margin: 10px 0 5px 0; */

}
/* 기본적으로 두 탭 전부 안보이는 상태로 설정을 먼저 해준다. tab-act일때 액티브하게 해줄 거기 때문! */
.notice-list, .notice-more, .pds-list, .pds-more{
    display: none;
}
.tab-act .notice-list, .tab .notice-more,
.tab-act .pds-list, .tab-act .pds-more{
    display: block;
}
.tab{
    border: 1px solid #aaa;
    border-radius: 5px 5px 0 0;
    background: #ccc linear-gradient(180deg, #ccc, #eee);
    font-size: 1.2rem;
    font-weight: 400;
    color: #666;
    padding: 10px 15px 8px;
    margin: 0;
    position: absolute;
    top: 0;
    cursor: pointer;
}
.tab-act .tab{
    color: #ce4827;
    background: #fff;
    border-color: #ce4827 #ce4827 #fff #ce4827;
}
.notice-heading{
    left: 0;
}
.pds-heading{
    left: 76px;
}
.notice-list, .pds-list{
    /* background-color: #296897; */
    list-style-type: none;
    padding-left: 0;
    margin: 0;
}
.notice-list li, .pds-list li{
    display: flex;
    /* justify-content: space-between; */
}
.notice-list a, .pds-list a{
    /* background-color: lightgreen; */
    /* space-between이랑 보기에는 같지만! 하지만 a 태그를 padding을 줘서 늘린것처럼 날짜와 li 사이에 space도 a태그 처리가 된다! */
    /* flex-grow: 1;  */
    /* 또 다른 기능 ...  */
    /* 개행이 될 경우 white-space를 사용...아래의 2 속성과 꼭 세트로 같이 다닌다는 것 
    꼭 기억! 넘치는 영역이 있을 때, 말 줄임표 ...을 생기게 하려면 ellipsis, white-space, overflow:hidden 사용! 
    cf. https://velog.io/@susu1991/multiline-ellipsis */
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    width: 280px;
}

/* .notice-heading, .pds-heading{
    float: left;
    margin: 10px 0 5px 0;
}
.notice-list, .pds-list{
    clear: both;
    background-color: pink;
    list-style: none;
    padding-left: 0;
    margin: 0;
}
.notice-list > li, .pds-list > li{
    padding: 7px 0 0 0;
}
.notice-list > time, .pds-list > time{
} */



/* 새소식 */
.news{
    margin-top: 20px; 
    position: relative;
}
.news::before{
    content: "";
    position: absolute;
    top: 35px;
    left: 0;
    width: 100%;
    /* height: 10px; */
    height: 1px;
    background: #aaa linear-gradient(90deg, #aaa 0%, #ccc 50%, #fff 70%, #fff 100%);
}
.news-heading{
    margin: 0;
    font-size: 1.5rem;
    color: var(--primary-color);
}
.news-item{
    position: relative;
    padding-left: 145px;
    margin-top: 35px;
}
.news-item-heading{
    margin: 0 0 5px 0;
}
.news-item-brief{
    margin: 10px 0 0 0;
    line-height: 1.5;
}
.news-item-thumbnail{
    margin: 0;
    position: absolute;
    top: 0;
    left: 0;
    text-align: center;
}
.news-item-thumbnail > img{
    display: block;
    /* 밑에 원래는 #aaa가 오면 되는 것~ */
    margin-bottom: 15px;
    box-shadow: 0 15px 15px 1px var(--silver);
}
.news-more{
    position: absolute;
    top: -8px;
    right: -8px;
    padding: 8px;
}
.news-more::before{
    /* color: green; */
    /* hue(색상) saturation(채도) lightness(명도-밝기 조절/환함) alpha(투명도) 
    cf. https://homzzang.com/b/css-270*/
    color: hsla(110, 10%, 50%, 1);
}

/* 신규 이벤트 및 관련 사이트 */
.gradient-box{
    border: 1px solid #aaa;
    border-radius: 5px;
    background: #ccc linear-gradient(180deg, #ccc, #eee);
    padding: 10px;
}
/* 미리 만들어 놓고 공용으로 적용하는 '유틸리티 클래스'! */
.point-color{
    color: #ce4827;
}
.drop-shadow{
    /* display를 inline-block으로 해줘야지 그림자가 의도한대로 나옴! */
    display: inline-block;
    border: 1px solid #aaa;
    box-shadow: 5px 5px 0 0 #999;
}
.event{
    position: relative;
    border-bottom: 1px solid #aaa;
}
.event img{
    /* 이미지에 붙어있는 불필요한 공간들을 없애주는 역할! */
    vertical-align: top;
}
.event-heading, .related-heading, .favorite-heading{
    font-size: 1.5rem;
    margin: 0 0 15px 0;
    padding-top: 5px;
}
.event-brief{
    text-align: center;
    margin: 10px 0;
    line-height: 1.5;
}
.event-brief em{
    /* 기울린 것 다시 정상적으로 보이게... */
    font-style: normal;
    /* 선착~ 부터는 줄바꿈 할 수 있게...inline요소인 em을 block으로 성격을 바꾸기! */
    display: block;
}
.btn-event{
    height: 18px;
    overflow: hidden;
    position: absolute;
    top: 0;
    right: 0;
}
.btn-event button{
    width: 19px;
    /* 원하는 Height는 부모요소에게 줘야하고, Overflow:hidden도 부모요소에게 줘야한다.
    왜냐면 폼요소 button은 기본 값을 boeder-box로 우리가 지정했음에도 불구하고, 이거는 보더박스처럼 작동을 안해서... */
    /* height: 18px; */
    height: 0;
    /* 기본적으로 깔려있는 에이전트 값들을 다 초기화시킨다! 아래 세줄! */
    border: 0;
    padding: 18px 0 0 0;
    /* background-color: transparent;
    background-image: url(./images/backpage_forwardpage.png);
    background-repeat: no-repeat; */
    /* 하지만 아래와 같이 한꺼번에 해버리면 적용이 원하는데로 안됌! 왜? 구체성때문에! 
    지금 아래의 코드는 클래스 하나 사용했으니까 10점 그리고 요소하나 사용했으니까 1점 해서 총 11점인데...
    .btn-event-next는 클래스 하나 사용해서 10점밖에 안돼기 때문!!
    밑에서 .btn-event-next에서 x, y축을 정의한 부분이 구체성에서 지금 바로 아래의 코드보다 밀리기 때문이다...
    그래서... .btn-event-next에 !important를 넣어서 구체성을 높여주면 됨!*/
    /* 또는 지금 .btn-event button으로 css작업을 하지말고... .btn-event-prev, .btn-event-next{}로 하면 이런 구체성 문제가 해결 됨! 이런 선언방식이 지향해야하는 방식!! */
    background: url(./images/backpage_forwardpage.png) no-repeat;
}
.btn-event-next{
    background-position: -35px 0 !important;
}
.related{
    padding-top: 10px;
}
.related-list{
    background-color: #fff;
    height: 27px;
    border: 1px solid #aaa;
    border-radius: 5px;
    overflow: hidden;
    margin: 0;
    padding-left: 0;
    list-style-type: none;
    /* 높이도 패딩도(원래 패딩은 듀레이션에 포함 안되는 영역!) 트렌지션의 효과에 넣어줘! 이런 의미! */
    /* transition-property: height, padding, background-color; */
    transition-property: all;
    transition-duration: 0.4s;
    /* 보통 트렌지션 듀레이션 타임은 0.4초, 빠르면 0.2초, 느리다 싶으면 0.6초 ~ */
    /* transition-duration: 0.4s, .2s, .6s; */
    /* transition-duration: 2000ms --> 높이 , 500ms --> 패딩; */
    /* 여기서 높이나 패딩을 먼저 다 늘린다음에 그다음에 다른 요소가 늘어나게끔 하려면 아래와 같은 트릭을 사용! 
    즉, 아래와 같이 적으면 height는 1s 있다가 작동을 시작해서 2초에 거쳐서 높이가 늘어나게 된다!*/
    /* 아래에 0에 s 라는 단위 붙이는 것 잊어버리지 말기! 꼭!  */
    /* -o-transition-delay: 0s, 2s, 3s; */
}
/* ul요소에 :hover를 주는 것! a 요소가 아니라! */
.related-list:hover, .related-list:focus{
    height: 147px;
    padding: 10px 0;
    /* background-color: #fff; */
}
/* li나 ul을 건드려도 되겠지만 a요소를 블록으로 바꾸면 부모요소인 li를 꽉 채우면서 클릭할 수 있는 면적도 더 커진다는 장점!
단, 그렇게 되면 만약 text-align을 센터로 딱 주고 싶으면... line-height또는 부모요소에 flex를 줘도 됨!  */
.related-list a{
    display: block;
    line-height: 25px;
    text-indent: 2em;
    /* a 요소에 둥근 모서리 효과를 주면 밑에 a요소가 포커스를 받았을 때 둥근모서리의 아웃라인이 잡히는 효과가 난다! 
    이런 방법 말고도 박스 사이즈에는 영향을 안주는 요소인 box-shadow: ;를 사용할 수 있다!  */
    border-radius: 5px;
}
.related-list a:focus{
    outline: 1px solid darkblue;
    /* 안쪽으로 아웃라인인 들어와서 아웃라인을 잡아라~ 이런의미! */
    outline-offset: -2px;
}



/* 인기 사이트 목록 */
.favorite{
    margin-top: 20px;
    position: relative;
    padding-top: 15px;
}
.favorite-list{
    margin: 0;
    padding: 0;
    list-style-type: none;
}
/* .no1::before{
    content: "1";
    background-color: #aaa;
    padding: 0 5px;
    margin-right: 2px;
    border: 1px solid rgb(165, 158, 158);
    border-radius: 3px;
    color: #fff;
}
.no2::before{
    content: "2";
    background-color: #aaa;
    padding: 0 3px;
    margin-right: 2px;
    border: 1px solid rgb(165, 158, 158);
    border-radius: 3px;
    color: #fff;
}
.no3::before{
    content: "3";
    background-color: #aaa;
    padding: 0 3px;
    margin-right: 2px;

    border: 1px solid rgb(165, 158, 158);
    border-radius: 3px;
    color: #fff;

}
.no4::before{
    content: "4";
    background-color: #aaa;
    padding: 0 3px;
    margin-right: 2px;

    border: 1px solid rgb(165, 158, 158);
    border-radius: 3px;
    color: #fff; 
}*/
/* 이런 반복은 그만!! */
.favorite-list li{
    /* background-color: pink; */
    counter-increment: number;
    margin: 5px 0;
    /* 부모 상자를 플렉스로 만들어주면 아래 비포상자는 더이상 인라인이 이니다... 플렉스의 아이템 상자로써의 성격을 갖는다! */
    display: flex;
    align-items: center;
    
}
.favorite-list a{
    flex-grow: 1;
    /* background-color: aqua; */
    /* font-weight: 400; */
}
/* .favorite-list em{    ----> 으로 하면 나중에 구체성 문제가 생길 수 도 있음!!! 그래서 아래와 같이!
    width: 9px;
    height: 11px;
    overflow: hidden;
    text-indent: 9px;
    white-space: nowrap;
    background-image: url(./images/rank.png);
} */
.favorite-list .up,
.favorite-list .stop,
.favorite-list .down{
    font-style: normal;
    /* background-color: lime; */
    width: 9px;
    height: 11px;
    text-indent: 9px;
    overflow: hidden;
    white-space: nowrap;
    background-image: url(./images/rank.png);
    background-repeat: no-repeat;
}
.favorite-list .stop{
    /* 상자의 y축의 중간의 이미지를 보여줘! 이런 의미! */
    background-position: 0 50%;
}
.favorite-list .down{
    /* 상자의 바텀영역을 매칭 시키는 것! */
    background-position: 0 100%;
}
.favorite-list li::before{
    /* 아라비안 숫자 말고 알파벳도 가능! */
    content: counter(number);
    color: #fff;
    background-color: #aaa;
    border-radius: 3px;
    /* ::before는 인라인 상자! 그래서 가로와 세로를 넣어주려면... 
    인라인 블록으로 바꿔주고 패딩과 마진을 넣어준다! */
    /* display: inline-block; */
    padding: 2px 5px;
    margin-right: 5px;
}

.favorite-more{
    position: absolute;
    top: 9px;
    right: 2px;
    padding: 8px;
}
.favorite-more::before{
    color: hsla(110, 30%, 50%, 1))
}


/*슬로건 */
.slogan{
    /* background-color: yellow; */
    padding: 10px 100px 10px 180px;
    position: relative;
}
.slogan-heading{
    width: 110px;
    height: 83px;
    /* 라인 하이트 트릭으로 마치 중간에 위치하는 것처럼 보이게 하는 효과가 있다! */
    line-height: 83px;
    /* 위에 방법이 싫어면... flex로 디스플레이를 바꾸고, align-items: center; 
    justify-content: center;를 해도 좋음!*/
    text-align: center;
    position: absolute;
    position: relative;
    bottom: -25px;
    left: 35px;
    margin: 0;
}
.slogan-heading::after{
    /* 이게 IR기법! 포지션을 이용하여 배경용 상자를 가상요소를 사용하여 만들고 텍스트를 이걸로 겹쳐버리는 것!!!!!!!!
    이거 완전 중요!!!!!!!! */
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    /* background-color: green; */
    background: url(./images/coffee.png) no-repeat;
}
.slogan-content{
    font-size: 1.4rem;
    color: #988674;
    margin: 0;
}
/* .slogan-content q{
    quotes: "[[" "]]";
} */
.slogan-content q::before{
    font-size: 3.6rem;
    /* 포지션을 relative로 하면 노멀 플로우지만, 나 자신에 대해서 top좌표를 바꿔주면 
    그만큼 나 자심이 움직인다는 의미! */
    position: relative;
    top: 15px;
}
.slogan-content q::after{
    /* 안보이게 처리! null값으로 지정! */
    content: "";  
}


/* 전체 HTML의 푸터 */
.footer{
    background-color: silver;
}
.footer-content{
    background-color: pink;
    display: grid;
    /* grid만 지원하는 단위 1fr (분숫값 단위) --> 만약 width가 고정적인 것이 아니면 ... 남는 영역중에 알나서 늘어나라~ 이런 의미! */
    grid-template-columns: 140px 1fr 100px;
    /* 원래 rows는 안 정해줘도 되긴함! 왜냐면 자동으로 늘어나서... */
    grid-template-rows: 50px 50px 50px;
    /* 그리드를 요소 검사를 할 때는 파이어 폭스를 사용하는 것이 훨씬 좋으니까 참고! */
}
.footer-logo{
    background-color: salmon;
    grid-area: 1 / 1 / 4 / 2;
}
.address{
    background-color: lime;
    grid-row-start: 2;
    grid-column-start: 2;
    grid-row-end: 3;
    grid-column-end: 3;
}
.copyright{
    background-color: skyblue;
    /* 스타트랑 끝지점을 알려주는 것을 귀찮을수도... 번거로울 수도... 그렇다면 아래와 같이 단축 표기법으로 선언해보자! */
    grid-area: 3 / 2 / 4 / 3;
}
.badge{
    background-color: teal;
    grid-area: 1 / 3 / 4 / 4;
}
/* 팁: 만약에 column과 row의 순서/숫자를 명시하는 것이 복잡하다고 하면... 이름을 정해줄 수도 있다! */
/* cf. https://yamoo9.gitbook.io/css-grid/ */
/* 꼭 그리드가 편한 것은 아니다... 상황에 따라 플렉스를 사용하고 그 외에 다른 기법들을 사용하면 됨^^ */
/* .footer-content{
    display: grid;
    grid-template-columns: 140px 1fr 100px;
    grid-template-rows: 50px 50px 50px;
    grid-template-areas: "logo guide badge"
                        "logo address badge"
                        "logo copyright badge";
}
.footer-logo{
    grid-area: logo;
}
.address{
    grid-area: address;

}
.copyright{
    grid-area: copyright;
    
}
.badge{
    grid-area: badge;
} */